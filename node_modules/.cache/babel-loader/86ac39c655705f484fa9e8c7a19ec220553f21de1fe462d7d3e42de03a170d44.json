{"ast":null,"code":"var _jsxFileName = \"/Users/ivanvoloshyn/Desktop/All_projects_vs/vishivankas/vishivankas/src/Components/AboutPage/Item/Grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Item from \"./Item\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  element\n}) => {\n  _s();\n  var _elements;\n  const [currentPage, setCurrentPage] = useState(1);\n  const elementsPerPage = 10;\n\n  // Ensure elements is an array before attempting to slice it\n  const currentElements = Array.isArray(elements) ? elements.slice((currentPage - 1) * elementsPerPage, currentPage * elementsPerPage) : [];\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [currentElements && currentElements.length > 0 ? currentElements.map((element, index) => /*#__PURE__*/_jsxDEV(Element, {\n      data: element\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No elements to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: Array.from({\n        length: Math.ceil((((_elements = elements) === null || _elements === void 0 ? void 0 : _elements.length) || 0) / elementsPerPage)\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => paginate(index + 1),\n        children: index + 1\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"6xAUoJ2motYJ38x4zeUWisA+X/4=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","Item","jsxDEV","_jsxDEV","Grid","element","_s","_elements","currentPage","setCurrentPage","elementsPerPage","currentElements","Array","isArray","elements","slice","paginate","pageNumber","className","children","length","map","index","Element","data","fileName","_jsxFileName","lineNumber","columnNumber","from","Math","ceil","_","onClick","_c","$RefreshReg$"],"sources":["/Users/ivanvoloshyn/Desktop/All_projects_vs/vishivankas/vishivankas/src/Components/AboutPage/Item/Grid.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Item from \"./Item\";\n\n\nconst Grid = ({ element }) => {\n\n  \n    const [currentPage, setCurrentPage] = useState(1);\n  const elementsPerPage = 10;\n\n  // Ensure elements is an array before attempting to slice it\n  const currentElements = Array.isArray(elements) ? elements.slice((currentPage - 1) * elementsPerPage, currentPage * elementsPerPage) : [];\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  return (\n    <div className=\"grid\">\n      {currentElements && currentElements.length > 0 ? (\n        currentElements.map((element, index) => (\n          <Element key={index} data={element} />\n        ))\n      ) : (\n        <p>No elements to display.</p>\n      )}\n      {/* Pagination */}\n      <div className=\"pagination\">\n        {Array.from({ length: Math.ceil((elements?.length || 0) / elementsPerPage) }, (_, index) => (\n          <button key={index} onClick={() => paginate(index + 1)}>\n            {index + 1}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n\n}\n\nexport default Grid"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,SAAA;EAG1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAMU,eAAe,GAAG,EAAE;;EAE1B;EACA,MAAMC,eAAe,GAAGC,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,GAAGA,QAAQ,CAACC,KAAK,CAAC,CAACP,WAAW,GAAG,CAAC,IAAIE,eAAe,EAAEF,WAAW,GAAGE,eAAe,CAAC,GAAG,EAAE;EAEzI,MAAMM,QAAQ,GAAIC,UAAU,IAAKR,cAAc,CAACQ,UAAU,CAAC;EAE3D,oBACEd,OAAA;IAAKe,SAAS,EAAC,MAAM;IAAAC,QAAA,GAClBR,eAAe,IAAIA,eAAe,CAACS,MAAM,GAAG,CAAC,GAC5CT,eAAe,CAACU,GAAG,CAAC,CAAChB,OAAO,EAAEiB,KAAK,kBACjCnB,OAAA,CAACoB,OAAO;MAAaC,IAAI,EAAEnB;IAAQ,GAArBiB,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAkB,CACtC,CAAC,gBAEFzB,OAAA;MAAAgB,QAAA,EAAG;IAAuB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC9B,eAEDzB,OAAA;MAAKe,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxBP,KAAK,CAACiB,IAAI,CAAC;QAAET,MAAM,EAAEU,IAAI,CAACC,IAAI,CAAC,CAAC,EAAAxB,SAAA,GAAAO,QAAQ,cAAAP,SAAA,uBAARA,SAAA,CAAUa,MAAM,KAAI,CAAC,IAAIV,eAAe;MAAE,CAAC,EAAE,CAACsB,CAAC,EAAEV,KAAK,kBACrFnB,OAAA;QAAoB8B,OAAO,EAAEA,CAAA,KAAMjB,QAAQ,CAACM,KAAK,GAAG,CAAC,CAAE;QAAAH,QAAA,EACpDG,KAAK,GAAG;MAAC,GADCA,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAGV,CAAC;AAAAtB,EAAA,CA/BKF,IAAI;AAAA8B,EAAA,GAAJ9B,IAAI;AAiCV,eAAeA,IAAI;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}